using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

// ???? ????? ??????
public class Tank // Ta?? ??????
{
    // ??????????? ??? ??????? ?? ??????? ?????
    public int X { get; set; }
    public int Y { get; set; }
    public int Width { get; set; } = 50; // ?????? ????? ?? ?????????????
    public int Height { get; set; } = 50; // ?????? ????? ?? ?????????????
    public int Angle { get; set; } = 90; // ??? ???????? ????? ?? ?????????????
    public Image TankImage { get; set; } // ?????????? ?????

    // ????????? ??? ???????? ???? ?????
    protected const int MinX = 0;
    protected const int MaxX = 800;
    protected const int MinY = 0;
    protected const int MaxY = 450;

    // ???????????, ?? ?????????? ?????????? ?????
    public Tank(string imagePath)
    {
        TankImage = Image.FromFile(imagePath);
    }

    // ????? ??? ???????????? ????? ?? ??????
    public void Draw(Graphics g)
    {
        var state = g.Save(); // ?????????? ????? ?????????? ??'????
        g.TranslateTransform(X + Width / 2, Y + Height / 2); // ??????? ????????? ? ????? ?????
        g.RotateTransform(Angle); // ??????? ????? ?? ??????? ???
        g.DrawImage(TankImage, -Width / 2, -Height / 2, Width, Height); // ????????? ?????
        g.Restore(state); // ??????????? ????? ?????????? ??'????
    }

    // ????? ??? ???? ????? ?????
    public void MoveUp(List<Wall> walls)
    {
        if (Y - 5 >= MinY && !CheckCollision(X, Y - 5, walls))
        {
            Y -= 5;
            Angle = 90; // ??????? ????? ?? 90 ???????? (?????)
        }
    }

    // ????? ??? ???? ????? ????
    public void MoveDown(List<Wall> walls)
    {
        if (Y + 5 + Height <= MaxY && !CheckCollision(X, Y + 5, walls))
        {
            Y += 5;
            Angle = 270; // ??????? ????? ?? 270 ???????? (????)
        }
    }

    // ????? ??? ???? ????? ??????
    public void MoveRight(List<Wall> walls)
    {
        if (X + 5 + Width <= MaxX && !CheckCollision(X + 5, Y, walls))
        {
            X += 5;
            Angle = 180; // ??????? ????? ?? 180 ???????? (??????)
        }
    }

    // ????? ??? ???? ????? ?????
    public void MoveLeft(List<Wall> walls)
    {
        if (X - 5 >= MinX && !CheckCollision(X - 5, Y, walls))
        {
            X -= 5;
            Angle = 0; // ??????? ????? ?? 0 ???????? (?????)
        }
    }

    // ????? ??? ????????? ????????? ? ???????
    public bool CheckCollision(int newX, int newY, List<Wall> walls)
    {
        Rectangle tankRect = new Rectangle(newX, newY, Width, Height); // ???????????, ?? ??????????? ????

        foreach (var wall in walls)
        {
            if (wall.IsDestroyed) continue; // ?????????? ??????? ?????

            Rectangle wallRect = new Rectangle(wall.X * 50, wall.Y * 50, 50, 50); // ???????????, ?? ??????????? ?????

            if (tankRect.IntersectsWith(wallRect))
            {
                return true; // ???? ? ?????????, ????????? true
            }
        }

        return false; // ???? ???????? ?????, ????????? false
    }

    // ????? ??? ????????? ???????, ?? ???? ????????? ??????
    public Point GetProjectileSpawnPosition()
    {
        int offset = 30; // ???????? ??? ????????? ??????? ???? ??????
        int spawnX = X + Width / 2;
        int spawnY = Y + Height / 2;

        // ???????????? ??????? ? ?????????? ??? ???? ???????? ?????
        switch (Angle)
        {
            case 0: // ??????? ??????
                spawnX = X + Width - offset - 40;
                break;
            case 90: // ??????? ?????
                spawnY = Y - offset;
                break;
            case 180: // ??????? ?????
                spawnX = X + offset + 40;
                break;
            case 270: // ??????? ????
                spawnY = Y + Height + offset;
                break;
        }

        return new Point(spawnX, spawnY); // ?????????? ????????? ??? ????????? ???????
    }
}

// ???? ???????? ?????
public class EnemyTank : Tank
{
    private int vx; // ????????? ? ???????? X
    private int vy; // ????????? ? ???????? Y
    private const int MoveSpeed = 1; // ????????? ???? (????? ??????? ?? ???????)
    private const int UpdateInterval = 30; // ???????? ????????? ? ????????????
    private Map map; // ????? ???
    private List<Projectile> projectiles; // ?????? ????????
    private Image projectileImage; // ?????????? ???????
    private Random random; // ????????? ?????????? ?????
    private Battle_City.Game gameForm; // ????????? ?? ????????? ????? ???

    public EnemyTank(string imagePath, int x, int y, Map map, List<Projectile> projectiles, Image projectileImage, Battle_City.Game form)
        : base(imagePath)
    {
        X = x;
        Y = y;
        this.map = map;
        this.projectiles = projectiles;
        this.projectileImage = projectileImage;
        random = new Random();
        gameForm = form; // ?????????? ????????? ?? ????????? ?????

        // ????????????? ?????????
        vx = 0;
        vy = 0;

        // ?????? ??? ????????
        System.Windows.Forms.Timer shootTimer = new System.Windows.Forms.Timer();
        shootTimer.Interval = 5000; // ???????? ???????? (????? ??????? ?? ???????)
        shootTimer.Tick += ShootTimer_Tick;
        shootTimer.Start();

        // ?????? ??? ????
        System.Windows.Forms.Timer moveTimer = new System.Windows.Forms.Timer();
        moveTimer.Interval = UpdateInterval;
        moveTimer.Tick += MoveTimer_Tick;
        moveTimer.Start();
    }

    // ?????, ???? ??????????? ??? ??????? ???? ??????? ????
    private void MoveTimer_Tick(object sender, EventArgs e)
    {
        if (!gameForm.gamePaused) // ????????? ?? ????? ???
        {
            // ????????? ??????? ????? ?? ?????? ?????????
            X += vx;
            Y += vy;

            // ????????? ?? ????????? ?? ???????
            if (CheckWallCollision())
            {
                // ????? ???????? ???? ??? ????????? ?????? ?? ????
                vx = -vx;
                vy = -vy;
                UpdateAngleFromVelocity();
            }

            // ?????????? ????? ?????? ???????? ????
            if (random.Next(1000) < 5)
            {
                ChooseRandomDirection();
            }
        }
    }

    // ????? ??? ????????? ????????? ?? ???????
    private bool CheckWallCollision()
    {
        bool collisionOccurred = false;

        // ????????? ?? ????????? ? ?????? ?????
        if (X < 0 || X + Width > map.Width || Y < 0 || Y + Height > map.Height)
        {
            collisionOccurred = true;
        }

        // ????????? ?? ????????? ?? ???????
        Rectangle tankRect = new Rectangle(X, Y, Width, Height);
        foreach (var wall in map.Walls)
        {
            if (wall.IsDestroyed) continue; // ?????????? ??????? ?????

            Rectangle wallRect = new Rectangle(wall.X * 50, wall.Y * 50, 50, 50);
            if (tankRect.IntersectsWith(wallRect))
            {
                collisionOccurred = true;
                break;
            }
        }

        return collisionOccurred;
    }

    // ????? ??? ????????? ???? ???????? ????? ?? ?????? ???????? ?????????
    private void UpdateAngleFromVelocity()
    {
        if (vx == 0 && vy < 0)
        {
            Angle = 90; // ?????
        }
        else if (vx == 0 && vy > 0)
        {
            Angle = 270; // ????
        }
        else if (vx < 0 && vy == 0)
        {
            Angle = 0; // ?????
        }
        else if (vx > 0 && vy == 0)
        {
            Angle = 180; // ??????
        }
    }

    // ????? ??? ?????? ??????????? ???????? ????
    private void ChooseRandomDirection()
    {
        // ????? ?????? ??????????? ???????? ? ????????? ?????????
        int direction = random.Next(4);
        switch (direction)
        {
            case 0: // ?????
                vx = 0;
                vy = -MoveSpeed;
                Angle = 90;
                break;
            case 1: // ????
                vx = 0;
                vy = MoveSpeed;
                Angle = 270;
                break;
            case 2: // ?????
                vx = -MoveSpeed;
                vy = 0;
                Angle = 0;
                break;
            case 3: // ??????
                vx = MoveSpeed;
                vy = 0;
                Angle = 180;
                break;
        }
    }

    // ?????, ???? ??????????? ??? ??????? ???? ??????? ????????
    private void ShootTimer_Tick(object sender, EventArgs e)
    {
        if (!gameForm.gamePaused) // ????????? ?? ????? ???
        {
            Point spawnPosition = GetProjectileSpawnPosition(); // ????????? ??????? ??? ????????? ???????
            int adjustedAngle = Angle; // ?????????? ??? ??????? ???????????? ?? ??? ?????

            // ???? ???? ??????????? ????? ??? ??????, ????????? ??? ???????
            if (Angle == 0 || Angle == 180)
            {
                if (Angle == 0)
                {
                    adjustedAngle = 180; // ?????? ??????? ???????? ?????
                }
                else
                {
                    adjustedAngle = 0; // ?????? ??????? ???????? ??????
                }
            }

            var projectile = new Projectile(spawnPosition.X, spawnPosition.Y, adjustedAngle, projectileImage);
            projectiles.Add(projectile); // ????????? ??????? ? ?????? ????????
        }
    }
}

// ???? ???????
public class Projectile
{
    // ??????????? ???????
    public int X { get; set; } // ??????? X
    public int Y { get; set; } // ??????? Y
    public int Width { get; set; } // ??????
    public int Height { get; set; } // ??????
    public int Speed { get; set; } = 10; // ????????? ???????
    public Image ProjectileImage { get; set; } // ?????????? ???????
    public int Angle { get; set; } // ??? ???? ???????

    // ??????????? ???????
    public Projectile(int x, int y, int angle, Image image)
    {
        X = x;
        Y = y;
        Angle = angle;
        ProjectileImage = ScaleImage(image, 20, 20); // ????????????? ?????????? ?? ??????? 20x20
        Width = ProjectileImage.Width; // ???????????? ??????
        Height = ProjectileImage.Height; // ???????????? ??????
    }

    // ????? ??? ????????????? ??????????
    private Image ScaleImage(Image image, int width, int height)
    {
        Bitmap scaledImage = new Bitmap(width, height); // ????????? ?????? ?????????? ???????? ???????
        using (Graphics g = Graphics.FromImage(scaledImage))
        {
            g.DrawImage(image, 0, 0, width, height); // ????????? ?????????????? ??????????
        }
        return scaledImage; // ?????????? ?????????????? ??????????
    }

    // ????? ??? ???? ???????
    public void Move()
    {
        double radians = Math.PI * Angle / 180; // ??????????? ???? ? ???????
        X += (int)(Speed * Math.Cos(radians)); // ????????? ??????? X ?? ?????? ????????? ?? ????
        Y -= (int)(Speed * Math.Sin(radians)); // ????????? ??????? Y (?????????? Y ??????????? ? ????????? ????????? ??????)
    }

    // ????? ??? ???????????? ??????? ?? ??????
    public void Draw(Graphics g)
    {
        g.DrawImage(ProjectileImage, X, Y); // ????????? ?????????? ???????
    }

    // ????? ??? ????????? ????????? ?? ???????
    public bool CheckWallCollision(List<Wall> walls, List<Projectile> projectiles)
    {
        Rectangle projectileRect = new Rectangle(X, Y, Width, Height); // ???????????, ?? ??????????? ??????

        foreach (var wall in walls)
        {
            if (wall.IsDestroyed) continue; // ?????????? ??????? ?????

            Rectangle wallRect = new Rectangle(wall.X * 50, wall.Y * 50, 50, 50); // ???????????, ?? ??????????? ?????
            if (projectileRect.IntersectsWith(wallRect))
            {
                if (wall.Destructible)
                {
                    projectiles.Remove(this); // ????????? ??????? ?? ??????
                    wall.IsDestroyed = true; // ?????????? ????? ?? ????????
                    return true;
                }
                else
                {
                    projectiles.Remove(this); // ????????? ??????? ?? ??????
                }
            }
        }
        return false; // ?????????? false, ???? ???????? ?????
    }

    // ????? ??? ????????? ????????? ? ??????
    public bool CheckTankCollision(Tank tank)
    {
        Rectangle projectileRect = new Rectangle(X, Y, Width, Height); // ???????????, ?? ??????????? ??????
        Rectangle tankRect = new Rectangle(tank.X, tank.Y, tank.Width, tank.Height); // ???????????, ?? ??????????? ????
        return projectileRect.IntersectsWith(tankRect); // ????????? ?? ?????????
    }
}

// ????????????? ????? ??????????
public enum TerrainType
{
    Grass, 
    Water  
}

// ???? ??????
public class Wall
{
    // ??????????? ?????
    public int X { get; set; } // ??????? X ?????
    public int Y { get; set; } // ??????? Y ?????
    public bool Destructible { get; set; } // ?? ????? ??????? ?????
    public bool IsDestroyed { get; set; } // ?? ??????? ?????

    // ??????????? ??? ????????????? ???????????? ?????
    public Wall(int x, int y, bool destructible)
    {
        X = x; // ???????????? ??????? X
        Y = y; // ???????????? ??????? Y
        Destructible = destructible; // ????????????, ?? ????? ??????????
        IsDestroyed = false; // ????????????? ????? ?? ?????????????
    }
}

// ???? ?????
public class Map
{
    // ??????????? ?????
    public int Width { get; } // ?????? ?????
    public int Height { get; } // ?????? ?????
    public TerrainType[,] Tiles { get; } // ??????????? ?????, ?? ??????????? ???? ??????????
    public List<Wall> Walls { get; } // ?????? ???? ?? ?????

    // ??????????? ?????
    public Map(int width, int height)
    {
        Width = width; // ???????????? ??????
        Height = height; // ???????????? ??????
        Tiles = new TerrainType[width / 50, height / 50]; // ????????????? ?????? ????? ??????????
        Walls = new List<Wall>(); // ????????????? ?????? ????

        Random rand = new Random(); // ??'??? ??? ????????? ?????????? ?????

        // ?????????? ?????? ????? ?????????? ?????????? "Grass" (?????)
        for (int x = 0; x < Tiles.GetLength(0); x++)
        {
            for (int y = 0; y < Tiles.GetLength(1); y++)
            {
                Tiles[x, y] = TerrainType.Grass; // ????????? ???? ?????????? ?? "Grass"
            }
        }

        // ????????? ?????????? ???? ?? ?????
        for (int i = 0; i < Tiles.GetLength(0) * Tiles.GetLength(1) / 13; i++)
        {
            int x, y;
            do
            {
                x = rand.Next(Tiles.GetLength(0)); // ????????? ???????? X
                y = rand.Next(Tiles.GetLength(1)); // ????????? ???????? Y
            } while (Walls.Any(w => w.X == x && w.Y == y)); // ?????????, ??? ???????? ?????????? ????

            bool destructible = rand.Next(2) == 0; // ????????? ??????????, ?? ????? ??????????
            Walls.Add(new Wall(x, y, destructible)); // ????????? ????? ????? ?? ??????
        }
    }
}

namespace Battle_City
{
    // ????????? ????, ???? ?????? ??????? ???
    public partial class Game : Form
    {
        private Tank tank; // ?????????? ????
        private EnemyTank enemyTank; // ??????? ????
        private List<Projectile> projectiles = new List<Projectile>(); // ?????? ????????
        private Image projectileImage; // ?????????? ???????
        private bool canShoot = true; // ?? ???? ???? ????????
        private System.Windows.Forms.Timer cooldownTimer = new System.Windows.Forms.Timer(); // ?????? ??? ???????????
        private Map map; // ????? ???
        private Image mapImage; // ?????????? ?????
        private bool gameEnded = false; // ????????? ??? ?????????, ?? ??? ?????????
        private System.Windows.Forms.Timer gameTimer; // ?????? ??? ????????? ???
        private DateTime startTime; // ??? ??????? ???
        string resultMessage; // ???????????? ??? ????????? ???
        public bool gamePaused = false; // ????????? ??? ?????????, ?? ??? ???????????

        // ??????????? ???
        public Game()
        {
            InitializeComponent(); // ????????????? ??????????? ?????
            this.StartPosition = FormStartPosition.CenterScreen; // ???????????? ??????? ? ?????? ??????
            startTime = DateTime.Now; // ???????????? ???? ??????? ???

            // ????????????? ??????????? ?????
            string tankImagePath = @"E:\University\Term 2\Oop\Battle City\Battle City\Tank.png";
            tank = new Tank(tankImagePath)
            {
                X = 0, // ????????? ??????? X
                Y = 0  // ????????? ??????? Y
            };

            // ???????????? ?????????? ???????
            string projectileImagePath = @"E:\University\Term 2\Oop\Battle City\Battle City\05.png";
            projectileImage = Image.FromFile(projectileImagePath);

            // ????????????? ?????
            map = new Map(800, 450);

            // ????????????? ???????? ?????
            string enemyTankImagePath = @"E:\University\Term 2\Oop\Battle CIty\Battle City\Tank2.png";
            enemyTank = new EnemyTank(enemyTankImagePath, 400, 100, map, projectiles, projectileImage, this)
            {
                X = map.Width - 50,   // ?????? ?????? ???
                Y = map.Height - 50   // ?????? ?????? ???
            };

            // ????????? ???????????? ????? ?? ??????????
            mapImage = new Bitmap(800, 450);
            using (Graphics g = Graphics.FromImage(mapImage))
            {
                RenderMap(g); // ???????????? ?????
            }

            pictureBox1.Paint += pictureBox1_Paint; // ????????? ????????? ????? Paint ??? pictureBox1
            this.KeyDown += form1_KeyDown; // ????????? ????????? ????? KeyDown ??? ?????
            System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();
            timer.Interval = 30; // ???????? ???????
            timer.Tick += Timer_Tick; // ????????? ????????? ????? Tick ??? ???????
            timer.Start(); // ?????? ???????

            cooldownTimer.Interval = 5000; // ???????? ??? ??????? ???????????
            cooldownTimer.Tick += CooldownTimer_Tick; // ????????? ????????? ????? Tick ??? ??????? ???????????
            cooldownTimer.Start(); // ?????? ??????? ???????????

            // ????????? ????????? ??????????? ??? ?????????? ?????????????? ?????????
            SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
            SetStyle(ControlStyles.AllPaintingInWmPaint, true);
            SetStyle(ControlStyles.UserPaint, true);
        }

        // ?????, ?? ??????????? ??? ??????? ???? ??????? ???????????
        private void CooldownTimer_Tick(object sender, EventArgs e)
        {
            canShoot = true; // ???????? ???????? canShoot, ???? ?????? ??????????? ??????????
        }

        // ?????, ?? ??????????? ??? ??????? ???? ????????? ??????? ???
        private void Timer_Tick(object sender, EventArgs e)
        {
            bool wallDestroyed = false; // ????????? ??? ???????????, ?? ???? ??????? ?????
            List<Projectile> projectilesToRemove = new List<Projectile>(); // ?????? ???????? ??? ?????????

            // ??????????? ?? ???? ???????? ? ?????????? ???????
            for (int i = projectiles.Count - 1; i >= 0; i--)
            {
                var projectile = projectiles[i];
                projectile.Move(); // ??????????? ???????

                // ????????? ?? ????????? ? ??????? ??????
                if (projectile.CheckTankCollision(enemyTank))
                {
                    if (!gameEnded)
                    {
                        gameEnded = true; // ???????????? ???????? ?????????? ???
                        resultMessage = "Victory!"; // ???????????? ??? ????????
                        OnGameEnd(); // ?????? ?????? ?????????? ???
                    }
                }

                // ????????? ?? ????????? ? ?????? ??????
                if (projectile.CheckTankCollision(tank))
                {
                    if (!gameEnded)
                    {
                        gameEnded = true; // ???????????? ???????? ?????????? ???
                        resultMessage = "Defeat!"; // ???????????? ??? ???????
                        OnGameEnd(); // ?????? ?????? ?????????? ???
                    }
                }

                // ????????? ?? ????????? ? ???????
                if (projectile.CheckWallCollision(map.Walls, projectiles))
                {
                    wallDestroyed = true; // ???????????? ????????, ?? ????? ???????
                    projectilesToRemove.Add(projectile); // ????????? ??????? ?? ?????? ??? ?????????
                }
            }

            // ????????? ????????, ?? ?????????? ?? ???????
            foreach (var projectile in projectilesToRemove)
            {
                projectiles.Remove(projectile); // ????????? ??????? ?? ??????
            }

            // ???????????????? ?????, ???? ????? ???? ???????
            if (wallDestroyed)
            {
                RedrawMap();
            }

            pictureBox1.Invalidate(); // ?????? ??????????? ?????? ???
        }

        // ????? ??? ???????????????? ?????
        private void RedrawMap()
        {
            using (Graphics g = Graphics.FromImage(mapImage))
            {
                RenderMap(g); // ?????? ?????? ??? ????????? ?????
            }
            pictureBox1.Invalidate(); // ?????? ??????????? pictureBox1
        }

        // ????? ??? ??????? ????? Paint ?? pictureBox1
        private void pictureBox1_Paint(object sender, PaintEventArgs e)
        {
            e.Graphics.DrawImage(mapImage, 0, 0); // ????????? ?????????? ?????
            tank.Draw(e.Graphics); // ????????? ????? ??????
            enemyTank.Draw(e.Graphics); // ????????? ???????? ?????
            foreach (var projectile in projectiles)
            {
                projectile.Draw(e.Graphics); // ????????? ??????? ???????
            }
        }

        // ????? ??? ??????? ????? KeyDown
        private void form1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Up)
            {
                tank.MoveUp(map.Walls); // ??? ????? ?????
            }
            else if (e.KeyCode == Keys.Down)
            {
                tank.MoveDown(map.Walls); // ??? ????? ????
            }
            else if (e.KeyCode == Keys.Left)
            {
                tank.MoveLeft(map.Walls); // ??? ????? ?????
            }
            else if (e.KeyCode == Keys.Right)
            {
                tank.MoveRight(map.Walls); // ??? ????? ??????
            }
            else if (e.KeyCode == Keys.Space && canShoot)
            {
                Point spawnPosition = tank.GetProjectileSpawnPosition(); // ????????? ??????? ??? ?????? ???????
                int adjustedAngle = tank.Angle; // ?????????? ??? ???????

                // ???? ???? ???????? ????? ??? ??????, ????????? ??? ???????
                if (tank.Angle == 0 || tank.Angle == 180)
                {
                    if (tank.Angle == 0)
                    {
                        adjustedAngle = 180; // ?????? ??????? ???????? ?????
                    }
                    else
                    {
                        adjustedAngle = 0; // ?????? ??????? ???????? ??????
                    }
                }

                var projectile = new Projectile(spawnPosition.X, spawnPosition.Y, adjustedAngle, projectileImage); // ????????? ?????? ???????
                projectiles.Add(projectile); // ????????? ??????? ?? ??????

                canShoot = false; // ???????????? ????????, ?? ???????? ?? ?????
                cooldownTimer.Start(); // ?????? ??????? ???????????
            }

            pictureBox1.Invalidate(); // ?????? ??????????? pictureBox1
        }

        // ????? ??? ????????? ?????
        private void RenderMap(Graphics g)
        {
            // ???????????? ????????? ????? ?????????? 
            Image grassImage = Image.FromFile(@"E:\University\Term 2\Oop\Battle City\Battle City\Grass 001.png");

            // ???????????? ????????? ???? (????????? ?? ???????????)
            Image destructibleWallImage = Image.FromFile(@"E:\University\Term 2\Oop\Battle City\Battle City\885.jpg");
            Image indestructibleWallImage = Image.FromFile(@"E:\University\Term 2\Oop\Battle City\Battle City\878.jpg");

            int cellSize = 50; // ?????? ????????, ????? ?????????

            for (int x = 0; x < map.Tiles.GetLength(0); x++)
            {
                for (int y = 0; y < map.Tiles.GetLength(1); y++)
                {
                    Rectangle cellRect = new Rectangle(x * cellSize, y * cellSize, cellSize, cellSize); // ?????????? ????????
                    switch (map.Tiles[x, y])
                    {
                        case TerrainType.Grass:
                            g.DrawImage(grassImage, cellRect); // ????????? ?????
                            break;
                    }
                }
            }

            // ????????? ????
            foreach (var wall in map.Walls)
            {
                if (!wall.IsDestroyed) // ???? ????? ?? ???????
                {
                    Rectangle wallRect = new Rectangle(wall.X * cellSize, wall.Y * cellSize, cellSize, cellSize); // ??????????? ?????
                    if (wall.Destructible)
                        g.DrawImage(destructibleWallImage, wallRect); // ????????? ?????????? ?????
                    else
                        g.DrawImage(indestructibleWallImage, wallRect); // ????????? ???????????? ?????
                }
            }
        }

        // ?????, ???? ???????????? ??? ?????????? ???
        private void OnGameEnd()
        {
            TimeSpan currentTime = DateTime.Now - startTime; // ???????? ??? ???
            TimeSpan bestTime = BestTimeManager.ReadBestTime(); // ????????? ??? ???

            // ???????????? ????? ? ??????? "??:???"
            string formattedCurrentTime = currentTime.ToString(@"mm\:ss");
            string formattedBestTime = bestTime.ToString(@"mm\:ss");

            // ?????????? ?????????? ???
            if (currentTime < bestTime)
            {
                BestTimeManager.WriteBestTime(currentTime); // ????? ?????? ?????????? ???? ???
                MessageBox.Show($"{resultMessage}\nNew best time: {formattedCurrentTime}"); // ???????????? ??? ????? ????????? ???
            }
            else
            {
                MessageBox.Show($"{resultMessage}\nYour time: {formattedCurrentTime}\nBest time: {formattedBestTime}"); // ???????????? ??? ????????? ??? ?? ???
            }

            // ???????? ????? ??? ?? ???????????? ????????? ????
            this.Close();
            MainMenuForm mainMenu = new MainMenuForm();
            mainMenu.Show();
        }

        // ?????????????? ????? ??? ??????? ??????
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == Keys.Escape) // ?????????, ?? ????????? ??????? "Escape"
            {
                PauseGame(); // ?????? ?????? ??? ????? ???
                return true; // ?????????? true ??? ?????????? ??????? ???????
            }
            return base.ProcessCmdKey(ref msg, keyData); // ???????? ??????? ?? ???????? ?????, ???? ??????? ?? ????????? ? ???????? "Escape"
        }

        // ????? ??? ???????????? ???
        private void PauseGame()
        {
            gamePaused = true; // ???????????? ????? ????? ???

            // ????? ????? ?????
            PauseForm pauseForm = new PauseForm();
            pauseForm.StartPosition = FormStartPosition.CenterParent; // ???????????? ????? ????? ?? ??????
            pauseForm.ShowDialog(this); // ????? ????? ????? ?? ?????????? ??? ??????????? ???

            // ??????????? ???, ???? ?????????? ????? ???????????
            if (!pauseForm.ResumeGame) // ???? ?????????? ?? ???? ???????????? ???
            {
                this.Close(); // ???????? ????????? ????? ???
                MainMenuForm mainMenu = new MainMenuForm(); // ????????? ????????? ????
                mainMenu.Show(); // ???????????? ????????? ????
            }
            else // ???? ?????????? ????? ??????????? ???
            {
                gamePaused = false; // ????? ???????????? ????? ????? ??? ? ???????? false
            }
        }
    }
}